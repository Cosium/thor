#!/usr/bin/env node
'use strict';

var async = require('async')
  , path = require('path')
  , os = require('os');

//
// Setup the Command-Line Interface.
//
var cli = require('commander');

cli.usage('[options] ws://localhost')
   .option('-A, --amount <connections>', 'the amount of persistent connections to generate', parseInt, 10000)
   .option('-C, --concurrent <connections>', 'how many concurrent-connections per second', parseInt, 100)
   .option('-M, --messages <messages>', 'messages to be send per connection', parseInt, 0)
   .option('-B, --buffer <size>', 'size of the messages that are send', parseInt, 1024)
   .option('-W, --workers <cpus>', 'workers to be spawned', parseInt, os.cpus().length)
   .option('-G, --generator <file>', 'custom message generators')
   .version(require('../package.json').version)
   .parse(process.argv);

//
// Check if all required arguments are supplied, if we don't have a valid url we
// should bail out
//
if (!cli.args.length) return [
    'Thor:'
  , 'Odin is disapointed you... pithy human! You forgot to supply the urls.'
].forEach(function stderr(line) {
  console.error(line);
});

//
// By Odin's beard, unleash thunder!
//
var cluster = require('cluster')
  , workers = cli.workers || 1
  , robin = [];

cluster.setupMaster({
    exec: '../thunderbolt.js'
  , silent: true
  , args: cli.generator
    ? path.resolve(process.cwd(), cli.generator)
    : path.resolve(__dirname, '../session.js')
});

while (workers--) cluster.fork();

Object.keys(cluster.workers).forEach(function each(id) {
  var worker = cluster.workers[id];

  worker.on('message', function message(data) {
    switch (data.type) {
      case 'open':
      case 'close':
      case 'error':
      case 'message':
    }
  });

  // Add our worker to our round robin queue so we can balance all our requests
  // across the different workers that we spawned
  robin.push(worker);
});

//
// Up our WebSocket socket connections.
//
var tick = cli.concurrent > 1000 ? 1 : 1000 / cli.concurrent
  , concurrent = cli.concurrent > 1000 ? cli.concurrent / 1000 : 1
  , infinite = cli.amount === 0;

[
    ''
  , 'Thor:                                                  version: '+ cli._version
  , ''
  , 'God of Thunder, son of Odin and smasher of WebSockets!'
  , ''
  , 'Thou shall:'
  , '- Spawn '+ cli.workers +' workers.'
  , '- Create '+ cli.concurrent + ' concurrent/parallel connections.'
  , '- Smash '+ (cli.amount || 'infinite') +' connections with the mighty Mj√∂lnir.'
  , ''
  , 'The answers you seek shall be yours, once I claim what is mine.'
].forEach(function stdout(line) {
  console.log(line);
});

// Iterate over all the urls so we can target multiple locations at once, which
// is helpfull if you are testing multiple loadbalancer endpoints for example.
cli.args.forEach(function (url) {

});

process.once('SIGINT', process.exit.bind(process, 0));
process.once('exit', function summary() {

});
